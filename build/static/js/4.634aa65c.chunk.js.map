{"version":3,"sources":["post/defauly.jpg","post/happy.png","post/sad.png","post/Post.js"],"names":["module","exports","Happy","require","Sad","Posts","useState","data","setData","isAuthenticated","user","useEffect","fetch","method","headers","Accept","Authorization","localStorage","getItem","then","res","json","result","console","log","fetchMoreData","concat","Array","from","length","style","height","overflowY","map","post","key","_id","onScroll","dataLength","next","hasMore","loader","Event","Label","backgroundColor","width","fluid","circular","as","href","postedBy","mainHeight","maxHeight","mainWidth","maxWidth","src","onError","i","target","DefaultProfile","Content","Summary","onClick","postid","newData","filter","catch","err","deletePost","float","name","Date","created","toDateString","Extra","text","body","Image","alt","Meta","display","Like","likes","includes","id","userId","JSON","stringify","postId","item","unlikePosts","likePosts","Group","dividing","comments","record","Avatar","Author","Metadata","Text","Actions","Action","onSubmit","e","preventDefault","makeComment","value","type","placeholder"],"mappings":"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","file":"static/js/4.634aa65c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defauly.83e22d51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/happy.681130e7.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.182bca20.png\";","import React, { Component, useState, useEffect } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {\r\n  LazyLoadImage,\r\n  trackWindowScroll,\r\n} from \"react-lazy-load-image-component\";\r\n\r\nimport { isAuthenticated } from \"../auth\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { Image, Header, Feed, Comment, Form, Button } from \"semantic-ui-react\";\r\nimport { list, remove, like, unlike } from \"./apiPost\";\r\nimport DefaultProfile from \"./defauly.jpg\";\r\nconst Happy = require(\"./happy.png\");\r\nconst Sad = require(\"./sad.png\");\r\n\r\nconst Posts = () => {\r\n  const [data, setData] = useState([]);\r\n  const [user] = useState(isAuthenticated());\r\n  const [liked] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    fetch(`http://localhost:80/api/posts`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setData(result);\r\n        console.log(data)\r\n      });\r\n  }, []);\r\n  const likePosts = (id) => {\r\n    let userId = isAuthenticated().user._id;\r\n    fetch(`http://localhost:80/api/posts/like`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\r\n      },\r\n      body: JSON.stringify({ userId, postId: id }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        const newData = data.map((item) => {\r\n          if (item._id == result._id) {\r\n            return result;\r\n          } else {\r\n            return item;\r\n          }\r\n        });\r\n        setData(newData);\r\n      });\r\n  };\r\n  const unlikePosts = (id) => {\r\n    let userId = isAuthenticated().user._id;\r\n    fetch(`http://localhost:80/api/posts/unlike`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\r\n      },\r\n      body: JSON.stringify({ postId: id, userId }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        const newData = data.map((item, postedBy) => {\r\n          if (item._id === result._id) {\r\n            return result;\r\n          } else {\r\n            return item;\r\n          }\r\n        });\r\n        setData(newData);\r\n      });\r\n  };\r\n  const fetchMoreData = () => {\r\n    setData(data.concat(Array.from({ length: 5 })));\r\n  };\r\n\r\n  const makeComment = (text, postId) => {\r\n    let userId = isAuthenticated().user._id;\r\n    fetch(`http://localhost:80/api/posts/comment`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\r\n      },\r\n      body: JSON.stringify({ postId, userId, text }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        const newData = data.map((post) => {\r\n          if (post._id === result._id) {\r\n            return result;\r\n          } else {\r\n            return post;\r\n          }\r\n        });\r\n        setData(newData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const deletePost = (postid) => {\r\n    let userId = isAuthenticated().user._id;\r\n    fetch(`http://localhost:80/api/deletepost/${postid}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer\" + localStorage.getItem(\"jwt\"),\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        const newData = data.filter((post) => {\r\n          return post._id !==result._id\r\n        });\r\n        setData(newData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  return (\r\n    <div style={{ height: \"50%\", overflowY: \"scroll\" }}>\r\n      {data.map((post) => {\r\n        return (\r\n          <div key={post._id}>\r\n            <InfiniteScroll\r\n              onScroll\r\n              dataLength={data.length}\r\n              next={fetchMoreData}\r\n              hasMore={data.post < 3}\r\n              loader={<h4>Loading...</h4>}\r\n            >\r\n              <Feed>\r\n                <Feed.Event>\r\n                  <Feed.Label\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      width: \"70px\",\r\n                      height: \"70px\",\r\n                    }}\r\n                  >\r\n                    <Image\r\n                      fluid\r\n                      circular\r\n                      as=\"a\"\r\n                      href={`/user/${post.postedBy._id}`}\r\n                      style={{\r\n                        mainHeight: \"60px\",\r\n                        maxHeight: \"60px\",\r\n                        mainWidth: \"60px\",\r\n                        maxWidth: \"60px\",\r\n                      }}\r\n                      src={`http://localhost/api/user/photo/${post.postedBy._id}`}\r\n                      onError={(i) => (i.target.src = `${DefaultProfile}`)}\r\n                    ></Image>\r\n                  </Feed.Label>\r\n                  <Feed.Content>\r\n                    <Feed.Summary>\r\n                      {isAuthenticated().user &&\r\n                        isAuthenticated().user._id === post.postedBy._id && (\r\n                          <Button onClick={()=> deletePost(post._id)} style={{float:\"right\"}}>Delete</Button>\r\n                        )}\r\n                      <Feed.Summary key={post.postedBy}>\r\n                        {post.postedBy.name}\r\n                      </Feed.Summary>\r\n                      <Feed.Date>\r\n                        {new Date(post.created).toDateString()}\r\n                      </Feed.Date>\r\n                    </Feed.Summary>\r\n                    <Feed.Extra text>{post.body}</Feed.Extra>\r\n                    <Feed.Extra Image>\r\n                      <img\r\n                        style={{\r\n                          mainHeight: \"300px\",\r\n                          maxHeight: \"300px\",\r\n                          mainWidth: \"300px\",\r\n                          maxWidth: \"300px\",\r\n                        }}\r\n                        src={`http://localhost/api/post/photo/${post._id}`}\r\n                        onError=\"\"\r\n                        alt=\"\"\r\n                      ></img>\r\n                    </Feed.Extra>\r\n                    <Feed.Meta style={{ display: \"inline\" }}>\r\n                      {isAuthenticated() && (\r\n                        <Feed.Like>\r\n                          <div>\r\n                            {post.likes.includes(user.user._id) ? (\r\n                              <Image\r\n                                style={{ maxHeight: \"30px\", maxWidth: \"30px\" }}\r\n                                src={Sad}\r\n                                onClick={() => {\r\n                                  unlikePosts(post._id);\r\n                                }}\r\n                              />\r\n                            ) : (\r\n                              <Image\r\n                                style={{ maxHeight: \"30px\", maxWidth: \"30px\" }}\r\n                                src={Happy}\r\n                                onClick={() => {\r\n                                  likePosts(post._id);\r\n                                }}\r\n                              />\r\n                            )}\r\n                            {post.likes.length} likes\r\n                          </div>\r\n                        </Feed.Like>\r\n                      )}\r\n\r\n                      <div>\r\n                        <Comment.Group>\r\n                          <Header as=\"h3\" dividing></Header>\r\n\r\n                          {post.comments.map((record) => {\r\n                            return (\r\n                              <Comment>\r\n                                <Comment.Avatar src={`http://localhost/api/user/photo/${record.postedBy._id}`} />\r\n                                <Comment.Content>\r\n                                  <Comment.Author as=\"a\">\r\n                                    {record.postedBy.name}\r\n                                  </Comment.Author>\r\n                                  <Comment.Metadata>\r\n                                    <div>Today at 5:42PM</div>\r\n                                  </Comment.Metadata>\r\n                                  <Comment.Text>{record.text}</Comment.Text>\r\n                                  <Comment.Actions>\r\n                                    <Comment.Action>Reply</Comment.Action>\r\n                                  </Comment.Actions>\r\n                                </Comment.Content>\r\n                              </Comment>\r\n                            );\r\n                          })}\r\n                          <Comment>\r\n                            <form\r\n                              onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                makeComment(e.target[0].value, post._id);\r\n                              }}\r\n                            >\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"Comment..\"\r\n                              ></input>\r\n                            </form>\r\n                          </Comment>\r\n                        </Comment.Group>\r\n                      </div>\r\n                    </Feed.Meta>\r\n                    <hr></hr>\r\n                  </Feed.Content>\r\n                </Feed.Event>\r\n              </Feed>\r\n            </InfiniteScroll>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default Posts;\r\n"],"sourceRoot":""}